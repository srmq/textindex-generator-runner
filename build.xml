<project name="multilex-experiment" default="go" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:git="antlib:com.rimerosolutions.ant.git">
    <property name="ivy.jar.dir" value="${basedir}/ivy"/>
    <property name="ivy.install.version" value="2.4.0"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="ivy.conf.dir" value="${ivy.jar.dir}/conf" />
    <property name="downloads.dir" value="${basedir}/downloads" />
    <property name="maven3.install.version" value="3.6.2" />
    <property name="maven3.zip.file" value="${downloads.dir}/maven3.zip" />
    <property name="tools.home" value="${basedir}/tools" />    
    
    
    <condition property="isWindows">
            <os family="windows" />
    </condition>

    <condition property="isUnix">
            <os family="unix" />
    </condition>
    
    <condition property="skip.clone.repos">
            <and>
                    <available file="${basedir}/srmq-nlp-dl4j/.git" type="dir" />
                    <available file="${basedir}/srmq-nlp-tokenizers/.git" type="dir" />
            </and>
    </condition>
    
    <condition property="skip.nlp.tokenizers.package">
            <available file="${basedir}/srmq-nlp-tokenizers/target/srmq-nlp-tokenizers-0.0.1-SNAPSHOT.jar" type="file" />
    </condition>
    
    
    
    <target name="shell_windows_setup" if="isWindows">
            <property name="shell.executable" value="cmd" />
            <property name="shell.args" value="/c" />
    </target>

    <target name="shell_unix_setup" if="isUnix">
            <property name="shell.executable" value="sh" />
            <property name="shell.args" value="-c" />
    </target>

    
    <target name="download-ivy" unless="skip.download.ivy">
            <mkdir dir="${ivy.jar.dir}"/>
            <!-- download Ivy from web site so that it can be used even without any special installation -->
            <echo message="installing ivy..."/>
            <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" description="--> install ivy" >
            <!-- try to load Ivy here from local Ivy dir, in case the user has not already dropped
            it into Ant's lib dir (note that the latter copy will always take precedence).
            We will not fail as long as local lib dir exists (it may be empty) and
            Ivy is in at least one of Ant's lib dir or the local lib dir. -->
            <path id="ivy.lib.path">
                    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
            </path>
            <taskdef resource="org/apache/ivy/ant/antlib.xml"
                uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    
	<target name="gen-ivy-settings" depends="install-ivy">
		<mkdir dir="${ivy.conf.dir}" />
		<echoxml file="${ivy.conf.dir}/ivy-public-resolvers.xml">
			<ivysettings>
				<resolvers>
					<chain name="default-chain">
						<ibiblio name="srmq-maven-repo" m2compatible="true" usepoms="true" pattern="[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]" root="https://srmq-maven-repo.appspot.com" />
						<ibiblio name="public" m2compatible="true"/>
						<url name="sonatype-snapshots" m2compatible="true">
							<artifact pattern="https://oss.sonatype.org/content/repositories/snapshots/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"/>
						</url>
					</chain>
				</resolvers>
			</ivysettings>
		</echoxml>
		<echoxml file="${ivy.conf.dir}/ivysettings.xml">
			<ivysettings>
				<settings defaultResolver="default-chain"/>
				<include file="${ivy.conf.dir}/ivy-public-resolvers.xml"/>
				<include url="${ivy.default.settings.dir}/ivysettings-shared.xml"/>
				<include url="${ivy.default.settings.dir}/ivysettings-local.xml"/>
				<include url="${ivy.default.settings.dir}/ivysettings-main-chain.xml"/>
				<include url="${ivy.default.settings.dir}/ivysettings-default-chain.xml"/>
			</ivysettings>
		</echoxml>
		<echoxml file="${ivy.conf.dir}/ivy-git-tasks.xml">
			<ivy-module version="2.0">
				<info organisation="srmq.org" module="ivy-git-tasks"/>

				<configurations defaultconfmapping="default->default">
					<conf name="default" />
					<conf name="provided" description="they are provided by the env." />
					<conf name="compile" extends="default,provided" />
					<conf name="git-task" extends="default"/>
				</configurations>

				<dependencies>
					<dependency org="org.eclipse.jgit" 
                                name="org.eclipse.jgit.ant" 
                                rev="3.0.0.201306101825-r"  conf="git-task->default" />

					<dependency org="org.eclipse.jgit" 
                                name="org.eclipse.jgit" 
                                rev="3.0.0.201306101825-r" conf="git-task->default" />

					<dependency org="com.jcraft" 
                                name="jsch" 
                                rev="0.1.50" conf="git-task->default" />

					<dependency org="com.rimerosolutions.ant" 
                                name="ant-git-tasks"
                                rev="1.3.2" 
                                conf="git-task->default" />
				</dependencies>
			</ivy-module>
		</echoxml>
	</target>
	<target name="clone-repos" depends="gen-ivy-settings" unless="skip.clone.repos">
		<ivy:settings file="${ivy.conf.dir}/ivysettings.xml"/>
		<ivy:resolve file="${ivy.conf.dir}/ivy-git-tasks.xml" conf="git-task" />
		<ivy:cachepath pathid="git.task.classpath" conf="git-task" />

		<taskdef uri="antlib:com.rimerosolutions.ant.git" resource="com/rimerosolutions/ant/git/jgit-ant-lib.xml">
			<classpath>
				<path refid="git.task.classpath"/>
			</classpath>
		</taskdef>

		<git:git directory="srmq-nlp-dl4j" verbose="true">
			<git:clone uri="https://github.com/srmq/srmq-nlp-dl4j.git"/>
		</git:git>

		<git:git directory="srmq-nlp-tokenizers" verbose="true">
			<git:clone uri="https://github.com/srmq/srmq-nlp-tokenizers.git"/>
		</git:git>
	</target>
	<target name="clean-repos">
		<delete dir="srmq-nlp-dl4j" />
		<delete dir="srmq-nlp-tokenizers" />
	</target>
        
	<target name="download-maven" unless="skip.download">
		<mkdir dir="${downloads.dir}"/>
		<!-- download Maven from web site so that it can be used even without any special installation -->
		<echo message="downloading Maven..."/>
		<get src="https://archive.apache.org/dist/maven/maven-3/${maven3.install.version}/binaries/apache-maven-${maven3.install.version}-bin.zip"
             dest="${maven3.zip.file}" usetimestamp="true"/>
	</target>
	<target name="install-maven" depends="download-maven">
		<mkdir dir="${tools.home}" />
		<unzip src="${maven3.zip.file}" dest="${tools.home}" />
		<chmod file="${tools.home}/apache-maven-${maven3.install.version}/bin/mvn" perm="ugo+rx" />
	</target>
	<target name="run-mvn-goals" depends="install-maven,shell_windows_setup, shell_unix_setup">
		<exec dir="${exec_dir}" executable="${shell.executable}">
			<arg line="${shell.args} '${tools.home}/apache-maven-${maven3.install.version}/bin/mvn ${p_goals}'" />
		</exec>
	</target>

        <target name="srmq-nlp-tokenizers-package" depends="clone-repos" unless="skip.nlp.tokenizers.package">
		<antcall target="run-mvn-goals">
			<param name="exec_dir" value="${basedir}/srmq-nlp-tokenizers" />
			<param name="p_goals" value="package"/>
		</antcall>
	</target>

        <target name="srmq-nlp-dl4j-package" depends="clone-repos" unless="skip.nlp.dl4j.package">
		<antcall target="run-mvn-goals">
			<param name="exec_dir" value="${basedir}/srmq-nlp-dl4j" />
			<param name="p_goals" value="package -Dmaven.test.skip=true"/>
		</antcall>
	</target>
        
</project>
